{"ast":null,"code":"import { async } from \"@firebase/util\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAvPU9TBST_GBebNa-yqQesdwkCvNKV1RM\",\n  authDomain: \"crown-clothin-app.firebaseapp.com\",\n  projectId: \"crown-clothin-app\",\n  storageBucket: \"crown-clothin-app.appspot.com\",\n  messagingSenderId: \"985550680109\",\n  appId: \"1:985550680109:web:579b644592af6d703d08a4\",\n  measurementId: \"G-H709DH4C00\"\n};\nconst firebaseApp = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  console.log(userAuth);\n};\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const db = getFirestore();\nexport const createuserDocumentFromAuth = async userAuth => {\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  console.log(userDocRef);\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot);\n  console.log(userSnapshot.exists());\n\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt\n      });\n    } catch (error) {\n      console.log(\"error creating use\", error.message);\n    }\n  }\n\n  return userDocRef;\n};","map":{"version":3,"sources":["/home/oleg/Downloads/checkcode/crwn-clothing-v2-lesson-6/FIXED-CRWN-PROJ/src/utils/firebase/firebase.utils.js"],"names":["async","initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseApp","provider","setCustomParameters","prompt","createUserProfileDocument","userAuth","additionalData","console","log","auth","signInWithGooglePopup","db","createuserDocumentFromAuth","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","message"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SACEC,OADF,EAEEC,kBAFF,EAGEC,eAHF,EAIEC,kBAJF,EAKEC,8BALF,QAMO,eANP;AAOA,SAASC,YAAT,EAAuBC,GAAvB,EAA4BC,MAA5B,EAAoCC,MAApC,QAAkD,oBAAlD;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,mCAFS;AAGrBC,EAAAA,SAAS,EAAE,mBAHU;AAIrBC,EAAAA,aAAa,EAAE,+BAJM;AAKrBC,EAAAA,iBAAiB,EAAE,cALE;AAMrBC,EAAAA,KAAK,EAAE,2CANc;AAOrBC,EAAAA,aAAa,EAAE;AAPM,CAAvB;AAUA,MAAMC,WAAW,GAAGlB,aAAa,CAACU,cAAD,CAAjC;AAEA,MAAMS,QAAQ,GAAG,IAAIf,kBAAJ,EAAjB;AAEAe,QAAQ,CAACC,mBAAT,CAA6B;AAC3BC,EAAAA,MAAM,EAAE;AADmB,CAA7B;AAIA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAEfE,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACD,CAJM;AAMP,OAAO,MAAMI,IAAI,GAAG1B,OAAO,EAApB;AACP,OAAO,MAAM2B,qBAAqB,GAAG,MAAMzB,eAAe,CAACwB,IAAD,EAAOR,QAAP,CAAnD;AAEP,OAAO,MAAMU,EAAE,GAAGvB,YAAY,EAAvB;AAEP,OAAO,MAAMwB,0BAA0B,GAAG,MAAOP,QAAP,IAAoB;AAC5D,QAAMQ,UAAU,GAAGxB,GAAG,CAACsB,EAAD,EAAK,OAAL,EAAcN,QAAQ,CAACS,GAAvB,CAAtB;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAYK,UAAZ;AAEA,QAAME,YAAY,GAAG,MAAMzB,MAAM,CAACuB,UAAD,CAAjC;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAYO,YAAZ;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAYO,YAAY,CAACC,MAAb,EAAZ;;AAEA,MAAI,CAACD,YAAY,CAACC,MAAb,EAAL,EAA4B;AAC1B,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBb,QAA/B;AACA,UAAMc,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAM7B,MAAM,CAACsB,UAAD,EAAa;AACvBI,QAAAA,WADuB;AAEvBC,QAAAA,KAFuB;AAGvBC,QAAAA;AAHuB,OAAb,CAAZ;AAKD,KAND,CAME,OAAOE,KAAP,EAAc;AACdd,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCa,KAAK,CAACC,OAAxC;AACD;AACF;;AACD,SAAOT,UAAP;AACD,CAtBM","sourcesContent":["import { async } from \"@firebase/util\";\nimport { initializeApp } from \"firebase/app\";\nimport {\n  getAuth,\n  signInWithRedirect,\n  signInWithPopup,\n  GoogleAuthProvider,\n  createUserWithEmailAndPassword,\n} from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAvPU9TBST_GBebNa-yqQesdwkCvNKV1RM\",\n  authDomain: \"crown-clothin-app.firebaseapp.com\",\n  projectId: \"crown-clothin-app\",\n  storageBucket: \"crown-clothin-app.appspot.com\",\n  messagingSenderId: \"985550680109\",\n  appId: \"1:985550680109:web:579b644592af6d703d08a4\",\n  measurementId: \"G-H709DH4C00\",\n};\n\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst provider = new GoogleAuthProvider();\n\nprovider.setCustomParameters({\n  prompt: \"select_account\",\n});\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  console.log(userAuth);\n};\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\n\nexport const db = getFirestore();\n\nexport const createuserDocumentFromAuth = async (userAuth) => {\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  console.log(userDocRef);\n\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot);\n  console.log(userSnapshot.exists());\n\n  if (!userSnapshot.exists()) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n      });\n    } catch (error) {\n      console.log(\"error creating use\", error.message);\n    }\n  }\n  return userDocRef;\n};\n"]},"metadata":{},"sourceType":"module"}